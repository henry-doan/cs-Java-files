package a8;

// A StringSet is a collection of non-null strings, with no duplicates
// (i.e., no two elements may be equal).  
public class StringSet {
    private DynamicArray2 stringSet;
      
    // Creates an empty StringSet object
    public StringSet() {
    		stringSet = new DynamicArray2();
    }
    
    // Throws an IllegalArgumentException if e is null, otherwise adds
    // e to the set if there is not already an element in the set equal
    // to e
    public void insert(String e) {
    		if ( e == null) {
    			throw new IllegalArgumentException();
    		}
    		
    		if (!stringSet.contains(e)) {
    			stringSet.add(e);
    		}
    		
    }
    
    // Throws an IllegalArgumentException if e is null, otherwise
    // indicates whether the set contains e
    public boolean contains(String e) {
	    	if ( e == null) {
	    		throw new IllegalArgumentException();
		}
	    	
	    	for (int i = 0; i < stringSet.size(); i++) {
	    		if (stringSet.get(i) == e) {
	    			return true;
	    		}
	    	}
		
        return false;
    }
    
    // Throws an IllegalArgumentException if e is null, otherwise
    // removes e from the set
    public void remove(String e) {
     	if ( e == null) {
	    		throw new IllegalArgumentException();
		}
     	for (int i = 0; i < stringSet.size(); i++) {
	    		if (stringSet.get(i).equals(e))
	    			stringSet.remove(i);
	    	}
    }
    
    // Returns the number of strings in the set
    public int size() {
    		return stringSet.size();
    }  
    
    // Computes and returns the union of the StringSet that calls this method and the 
    // StringSet argument to the method.
    // The original StringSets should not be changed. The union set contains every 
    // element of each of the original StringSets.
    // Throws an IllegalArgumentException if other is null.
    public StringSet union(StringSet other) {
	    	if (other == null) {
	    		throw new IllegalArgumentException();
	    	}
    	return new StringSet();
    }

    // Computes and returns the intersection of the StringSet that calls this method and the 
    // StringSet argument to the method.
    // The original StringSets should not be changed. The intersection set contains every 
    // element that is in both of the StringSets and no other elements.
    // Throws an IllegalArgumentException if other is null.
    public StringSet intersection(StringSet other) {
    	// FILL IN
    	// modify the return to return the intersection.
    	return new StringSet();
    }

    // Returns a formatted string version of this set
    // Examples: If set contains "a" and "b", this method should 
    // return the string "{a, b}".  If the set is empty, this 
    // method should return the string "{}".
    public String toString() {
    	// FILL IN
    	
		// DO NOT return null. The following statement is a temporary 
		// placeholder to prevent a compiler error.  Remove when you 
		// implement this method.
    	return null;
    }
}