package programmingAssignment2;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.lang.NullPointerException;
import java.lang.UnsupportedOperationException;

import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdRandom;

public class RandomizedQueue<Item> implements Iterable<Item> {
	private Item[] itemQueue;
	private int size;
	private int first = 0;
	private int last = 0;
	
	/*
	 * Construct an empty randomized queue
	 */
	public RandomizedQueue() {
		itemQueue = (Item[]) new Object[2];
		size = 0;
	}
	
	/*
	 * Is the queue empty?
	 */
	public boolean isEmpty() {
		return size == 0;
	}
	
	/*
	 * Return the number of items on the queue
	 */
	public int size() {
		return size;
	}
	
	/*
	 * Resize the underlying array holding the elements 
	 * Method from https://www.youtube.com/watch?v=GNr872PjQMI
	 * he said we can use.
	 * 
	 * @author Robert Sedgewick & Kevin Wayne
	 */
	private void resize(int capacity) {
		assert capacity >= size;
		Item[] temp = (Item[]) new Object[capacity];
		for (int i = 0; i < size; i++) {
			temp[i] = itemQueue[i];
		}
		
		itemQueue = temp;
	}
	
	/*
	 * Add the item
	 */
	public void enqueue(Item item) {
		if (item == null) {
			throw new NullPointerException("item cannot be null");
		}
		
		if (size == itemQueue.length) {
			resize(2 * itemQueue.length);
		}
		
		itemQueue[size++] = item;
	}
	
	/*
	 * Delete and return a random item
	 */
	public Item dequeue() {
		if (isEmpty()) {
			throw new NoSuchElementException("There are no items");
		}
		
		Item item = itemQueue[size - 1];
		itemQueue[size - 1] = null;
		size--;
		
		if(size > 0 && size == itemQueue.length / 4) {
			resize(itemQueue.length / 2);
		}
		
		return item;
	}
	
	/*
	 * Return (but do not delete) a random item
	 */
	public Item sample() {
		if (isEmpty()) {
			throw new NoSuchElementException("There are no items");
		}
		
		int randomIndexFromQueue = StdRandom.uniform(size);
		
		return itemQueue[randomIndexFromQueue];
	}
	
	/*
	 * Return an independent iterator over items in random order
	 */
	@Override
	public Iterator<Item> iterator() {
		// TODO Auto-generated method stub
		return null;
	}
	
	/*
	 * Unit testing
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	

}
