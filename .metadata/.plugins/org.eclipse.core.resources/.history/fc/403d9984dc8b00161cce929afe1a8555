package a6;

/**
 * A collection of methods for the A6: Arrays and Search of CS 1410. An assortment of 
 * methods that does multiple function and has different purposes with array manipulations.
 * 
 * @author Henry Doan
 */

public class ArrayLibrary {
	
	public static void main(String[] args) {
		int[] arr = new int[5];
		int[] arryNum = { 2, 3, 4, 5, 4, 4, 3 };
		int[] integers = { 2, -9, 87, 6, 0, 12, -3 };
		int[] lost = { 4, 8, 15, 16, 23, 42 };
		String[] words = { "the", "quick", "brown", "fox" };
		char[] letters = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h' };
		int[] primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47 };
		int[] duplicates = { 4, 2, 3, 5, 4, 4, 3, 2, 9, 1, 3, 4, 5, 2, 1, 5 };
		
//		System.out.println(clear(integers));	 
//		System.out.println(reverseFill(arr, 2));
		System.out.println(arrayToString(lost));
//		System.out.println(containsDuplicate(words));
//		System.out.println(average(lost));
//		System.out.println(frequencyCount(duplicates));
//		System.out.println(makeFilledArray(5));
	}
	
	/**
	 * This method takes in a parameter of an integer array called clearArr and set 
	 * all the values of each array element to 0. The logic takes a for loop and set
	 * an integer variable of i and set it initaily to 0 and as i is less than the 
	 * length of the clearArr , then increment by 1 as long as the condition is met.
	 * inside the for loop, the clearArr array element , in the position of i gets 
	 * reassigned as 0. Then return the clearArr with the new values in it. This method
	 * does not show in the console, but does show as a debugger reference number 
	 * so to see the method in action, we would have to see it in the Debugger. 
	 * 
	 * @param clearArr  an integer array
	 * @return  clearArr with the new reassigned elements of 0
	 */
	
	// output is in the debugger 
	
	public static int[] clear(int[] clearArr) {
	    for(int i = 0; i < clearArr.length; i++ ){
	    		clearArr[i] = 0; 
	    }
		return clearArr;
	}
	
	/**
	 * This method takes and integer array and an integer value of N and set the 
	 * last array element value to N and then count backwards by 1 to the left until 
	 * the size of the integer array , reverseput is met. The logic takes a for loop
	 * and set an integer variable of i and set it initaily to 0 and as i is less 
	 * than the length of the integer array reverseput , then increment by 1 as long as 
	 * the condition is met. In the for loop, the array element at the end of the array
	 * subtract by the i while it is being incremented each time, and reassign the 
	 * element with N and then N incremented by one. Then return the array with the new
	 * assigned element. This method does not show in the console, but does show as 
	 * a debugger reference number so to see the method in action, we would have to 
	 * see it in the Debugger. 
	 * 
	 * @param reverseput  an integer array
	 * @param N           and integer to set the value of the last array element
	 * @return  reverseput with the new elments be reassigned to the value of the last array
	 *          element to n and then increment the left values by n plus one
	 */
	
	// output is in the debugger 
	
	public static int[] reverseFill(int[] reverseput, int N) {
	    for (int i = 0; i < reverseput.length; i++) {
	    		reverseput[( reverseput.length - 1) - i] = N++;
	    }
		return reverseput;
	}
	
	/**
	 * This method takes and integer array of arrToStringArr turns the array into
	 * a string. I have set up a string builder to built a new string called builder
	 * Then the logic takes a for loop and set an integer variable of i and set it 
	 * initaily to 0 and while i is less than the length of the integer array, 
	 * arrToStringArr, then increment by 1 as long as the condition is met. In the
	 * for loop, the array the elements of the array is then appended to the string
	 * builder of builder and while the position element is incrementing in the for
	 * loop followed by a comma at the end. With this logic, the last element is followed
	 * by a comma as well, which is unnessary to print. The new string variable takes 
	 * the builder and turns it into a string and set as a variable. The newerString
	 * takes away the last comma I mention above to make things logical by taking the
	 * substring at the end of the string token and remove it. Then the Final String 
	 * takes the newerString and wrap it in brackets. Then return the array as a string.
	 * This method does not show in the console, but does show as 
	 * a debugger reference number so to see the method in action, we would have to 
	 * see it in the Debugger. 
	 * 
	 * @param reverseput  an integer array
	 * @param N           and integer to set the value of the last array element
	 * @return  reverseput with the new elments be reassigned to the value of the last array
	 *          element to n and then increment the left values by n plus one
	 */

	public static String arrayToString(int[] arrToStringArr) {
		StringBuilder builder = new StringBuilder();
		for(int i = 0; i < arrToStringArr.length; i++ ) {
		    builder.append( arrToStringArr[i] + "," );
		}
		
		String newString = builder.toString();
		String newerString = newString.substring(0, newString.length()-1);
		String FinalString = "{" + newerString + "}";
		return FinalString;
	}
	
	public static boolean containsDuplicate(String[] DuplicateArrCheck) {
		for (int i = 0; i < DuplicateArrCheck.length; i++) {
		    for ( int h = i + 1; h < DuplicateArrCheck.length; h++) {
		        if (DuplicateArrCheck[h] == DuplicateArrCheck[i]){ 
		            return true;
		        }
		    }
		}
		return false;
	}
	
	public static double average(int[] AverageArr) {
	    int sum = 0;
	    
	    double average;
	    
	    for(int i = 0; i < AverageArr.length; i++){
	    		sum = sum + AverageArr[i];
	    }
		average = (double)sum/AverageArr.length;
		
		return average;
	}
	
	public static int[] frequencyCount(int[] dupArr) {
		int[] counter = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		int[] newArray = new int[dupArr.length];
		for (int i = 0; i < dupArr.length; i++) {
		    counter[dupArr[i] - 1]++;
		}

		for (int i = 0; i < counter.length; i++) {
		    newArray[i] = counter[i];
		}

		return newArray;
	}
	
	public static int[] makeFilledArray(int arrSize) {
		int[] intArray = new int[arrSize];
		for (int i = 0; i < intArray.length; i++){
	    	   intArray[i] = i;
	    }
		return intArray;
	}
	
	public static int[] sequentialSearchCount(int arrSize) {
		int[] intArray = new int[arrSize];
	return intArray;
	}
	
	public static int[] binarySearchCount(int arrSize) {
		int[] intArray = new int[arrSize];
		for (int i = 0; i < intArray.length; i++){
	    	   intArray[i] = i;
	    }
		return intArray;
	}
	
}
