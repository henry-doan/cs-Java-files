package ac;

import java.util.Comparator;

public class BinarySearchDeluxe {
	
	/*
	 * Return the index of the first key in a[] that equals the search key, or -1 if no such key.
	 * 
	 * @param --
	 * @return --
	 */
	public static <Key> int firstIndexOf(Key[] a, Key key, Comparator<Key> comparator) {
		if ( a == null || key == null || comparator == null ) {
			throw new java.lang.NullPointerException();
		}
		
		int low = 0;
		int high = a.length;
		int mid;
		
		if (high == 0) return -1;
		
		while(low <= high) {
			mid = low + (high - low) / 2;
			int comp = comparator.compare(key, a[mid]);
			
			if ( comp < 0 || comparator.compare(a[mid - 1], a[mid]) == 0) {
				high = mid - 1;
			} else if ( comp > 0) {
				low = mid + 1;
			} else {
				return mid;
			}
		}
		
		return -1;
		
	}
	
	/*
	 * Return the index of the last key in a[] that equals the search key, 
	 * or -1 if no such key.
	 * 
	 * @param a -- incoming generic key array.
	 *        key -- search item.
	 *        comparator -- a way to order the keys.
	 * @return result -- the index of the last key or -1 if there is none.
	 */
	public static <Key> int lastIndexOf(Key[] a, Key key, Comparator<Key> comparator) {
		if ( a == null || key == null || comparator == null ) {
			throw new java.lang.NullPointerException();
		}
		
		int low = 0;
		int high = a.length -1;
		int mid;
		
		if (high == 0) return -1;

		while(low <= high) {
			mid = low + (high - low) / 2;
			int comp = comparator.compare(key, a[mid]);
			
			if ( comp < 0 ) {
				high = mid - 1;
			} else if ( comp > 0 ) {
				low = mid + 1;
			} else {
				return mid;
			}
		}
		
		return -1;
		
	}
}
