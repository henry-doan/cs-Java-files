package quickSort;

public class QuickSort { 
	int partition(int arr[], int low, int high) { 
		int pivot = arr[high];inti = (low-1); // index ofsmaller element for(intj=low; j<high; j++) { // If current element is smaller than or // equal to pivot if(arr[j] <= pivot) { i++; // swap arr[i]and arr[j] inttemp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } 
	}

} // swap arr[i+1] and arr[high] (or pivot) inttemp = arr[i+1]; arr[i+1] = arr[high]; arr[high] = temp; returni+1; } /* The main function that implements QuickSort() arr[] --> Array to be sorted, low--> Starting index, high--> Ending index */voidsort(intarr[], intlow, inthigh) { if(low < high) { /* pi is partitioning index, arr[pi] isnow at right place */intpi = partition(arr, low, high); // Recursively sort elements before //partition and after partition sort(arr, low, pi-1); sort(arr, pi+1, high); } } /* A utility function to print array of size n */staticvoidprintArray(intarr[]) { intn = arr.length; for(inti=0; i<n; ++i) System.out.print(arr[i]+" "); System.out.println(); } // Driver program publicstaticvoidmain(String args[]) { intarr[] = {10, 7, 8, 9, 1, 5}; intn = arr.length; QuickSort ob = newQuickSort(); ob.sort(arr, 0, n-1); System.out.println("sorted array"); printArray(arr); } } 