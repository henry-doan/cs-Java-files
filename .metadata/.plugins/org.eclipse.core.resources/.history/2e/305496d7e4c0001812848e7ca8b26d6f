package programmingAssignment2;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.lang.NullPointerException;

import edu.princeton.cs.algs4.StdOut;

public class Deque<Item> implements Iterable<Item> {
	private int size;
	private Node<Item> first, last;
	
	/*
	 * Construct a node for linked list
	 */
	private static class Node<Item> {
		private Item item;
		private Node<Item> next, previous;
	}
	
	/*
	 * Construct an empty deque
	 */
	public Deque() {
		first = last = null;
		size = 0;
	}
	
	/*
	 * Is the deque empty?
	 * 
	 * @return true boolean -- if the deque is empty.
	 * 		   false boolean -- if there are items in the deque.
	 */
	public boolean isEmpty() {
		return size == 0;
	}
	
	/*
	 * Return the number of items on the deque
	 * 
	 * @return size -- the number of the size of the deque.
	 */
	public int size() {
		return size;	
	}
	
	/*
	 * Insert the item at the front
	 */
	public void addFirst(Item item) {
		if (item == null) {
			throw new NullPointerException("Item cannot be null");
		}
		
		if (first == null) {
			first = new Node<Item>();
			first.item = item;
			// maybe size++;
		}
 		
		Node<Item> second = first;
		first = new Node<Item>();
		first.item = item;
		first.next = second;
		size++;
	}
	
	/*
	 * Insert the item at the end
	 */
	public void addLast(Item item) {
		if (item == null) {
			throw new NullPointerException("Item cannot be null");
		}
		
		Node<Item> secondToLast = last;
		last = new Node<Item>();
		last.item = item;
		last.previous = secondToLast;
		size++;
	}
	
	/*
	 * Delete and return the item at the front
	 */
	public Item removeFirst() {
		if (isEmpty()) {
			throw new NoSuchElementException("Deque is empty");
		}
		Item item = first.item;
		first = first.next;
		size--;
		
		return item;
		
	}
	
	/*
	 * Delete and return the item at the end
	 */
	public Item removeLast() {
		return null;
		
	}
	
	/*
	 * Return an iterator over items in order from front to end
	 */
	public Iterator<Item> iterator() {
		return null;
		
	}
	
//	private void resize(int capacity) {
//		assert capacity >= size;
//		Item[] temp = (Item[]) new Object[capacity];
//		for (int i = 0; i < size; i++) {
//			
//		}
//	}
	
	/*
	 * Unit testing
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
