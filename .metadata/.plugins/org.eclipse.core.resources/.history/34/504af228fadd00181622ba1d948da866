package ep;

import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.Stack;

/*
 * An immutable data type that solves the 8 puzzle.
 * 
 * @author Henry Doan
 * @version October 23, 2018
 */
public class Solver {
	private Board workBoard;
	private Block lastBlock;
	 
	private class Block implements Comparable<Block> {
		public Block previous;
		public Board board;
		public int numMoves = 0;
		
		public Block(Board incommingBoard) {
			board = incommingBoard;
		}
		
		public Block(Board incommngBoard, Block prev) {
			board = incommngBoard;
			previous = prev;
			numMoves = previous.numMoves++;
		}
		
		@Override
		public int compareTo(Block b) {
			int diffOfBoardsManhattan = board.manhattan() - b.board.manhattan();
			int diffOfMoves = numMoves - b.numMoves;
			int sumOfMovesAndManhattan = diffOfBoardsManhattan + diffOfMoves;
			return sumOfMovesAndManhattan; 
		} 
	}
	
	/*
	 * Find a solution to the initial board (using the A* algorithm)
	 */
	public Solver(Board initial) {
		if (initial == null) {
			throw new java.lang.NullPointerException();
		}
		 
		workBoard = initial;
		 
		if (workBoard.isSolvable() == false) {
			throw new java.lang.IllegalArgumentException();
		}
		
		MinPQ<Block> blocks = new MinPQ<Block>();
		MinPQ<Block> blocks2 = new MinPQ<Block>();

		blocks.insert(new Block(workBoard));
		blocks2.insert(new Block(workBoard));
		
	 }
	

	 
	/*
	 * Min number of moves to solve initial board.
	 * 
	 * @return int number of moves to solve with the manhattan.
	 */
	 public int moves()	{
		 if (workBoard.isSolvable()) {
			 return lastBlock.numMoves;
		 }
		 else {
			 return -1;
		 }
		
	 }
	 
	/*
	 * Sequence of boards in a shortest solution.
	 * 
	 * @return  -- boards to the shortest solution.
	 */	 
	 public Iterable<Board> solution() {
		Stack<Board> boardsToSol = new Stack<Board>();
		
		while(lastBlock != null) {
			boardsToSol.push(lastBlock.board);
			lastBlock = lastBlock.previous;
		}
		
		return boardsToSol;
		 
	 }
	 
	/*
	 * Solve a slider puzzle.
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
