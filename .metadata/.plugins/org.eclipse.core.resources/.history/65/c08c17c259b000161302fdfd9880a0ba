package a10;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.Random;

import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

public class LightsOut extends JFrame implements ActionListener {
	private LightsButtons[][] buttons;
	private JButton quitButton;
	private JButton restartButton;
	
	public LightsOut() {
		
		try {
			UIManager.setLookAndFeel( UIManager.getCrossPlatformLookAndFeelClassName() );
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		buttons = new LightsButtons[5][5];
		
		//Grid panel
		JPanel gridPanel = new JPanel();
		gridPanel.setLayout(new GridLayout(5, 5));
		for( int i = 0; i < 5; i++) {
			for( int c = 0; c < 5; c++) {
				buttons[i][c] = new LightsButtons(i, c);
				buttons[i][c].addActionListener(this);
			
				gridPanel.add(buttons[i][c]);
				
				int random = (int)(Math.random() * 3);
				btnColor(buttons[i][c]);
				if(random == 2) {
					btnColor(buttons[i][c]);
				}		
			}
			
		}
		
		JPanel quitPanel = new JPanel();
		quitButton = new JButton("quit");
		quitButton.addActionListener(this);
		quitPanel.add(quitButton);
		
		JPanel restartPanel = new JPanel();
		restartButton = new JButton("restart");
		restartButton.addActionListener(this);
		restartPanel.add(quitButton);
		
		setTitle("LightsOut");
		setPreferredSize(new Dimension(500, 500));
		this.add(gridPanel, BorderLayout.CENTER);
		this.add(quitPanel, BorderLayout.NORTH);
		this.add(restartPanel, BorderLayout.NORTH);
		pack();
		
	}
	
	public void actionPerformed(ActionEvent e) {	
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		//change the button color
		JButton btn = (JButton)e.getSource();	
		btnColor(btn);
		
		//have the location of the button pressed
		String location = btn.getName();
		char colChar = location.charAt(0);
		char rowChar = location.charAt(1);
		int col = Character.getNumericValue(colChar);
		int row = Character.getNumericValue(rowChar);
		
		//have new variables be the surrounding the button
		JButton btnSelected = new JButton();			
		JButton northNeighbor = new JButton();				
		JButton westNeighbor = new JButton();				
		JButton eastNeighbor = new JButton();				
		JButton southNeighbor = new JButton();				
		
		
		btnSelected = buttons[col][row];	
		System.out.println(btnSelected);
		btnColor(btnSelected);	
		
		try {
			btnSelected = buttons[col - 1 ][row];	
			northNeighbor = btnSelected;
			btnColor(northNeighbor);					
		 } catch(ArrayIndexOutOfBoundsException i) {
			
		}
		
		try {
			westNeighbor = buttons[col][row - 1];			
			btnColor(westNeighbor);					
		} catch(ArrayIndexOutOfBoundsException i) {
			
		}
		
		try {
			eastNeighbor = buttons[col][row + 1];		
			btnColor(eastNeighbor);					
		} catch(ArrayIndexOutOfBoundsException i) {
			
		}
		
		try {
			southNeighbor = buttons[col + 1][row];		
			btnColor(southNeighbor);				
		} catch(ArrayIndexOutOfBoundsException i) {
			
		}
	
		won(btn);
		
	}
	
	private void won(JButton btn) {
		int count = 0;	
		//logic of winning
		//Loop through all of the tiles so far
		//have the count go up with each black btn
		for( int i = 0; i < 5; i++) {
			for( int c = 0; c < 5; c++) {
				if (btn.getBackground() == Color.BLACK) {
					count++;
				}
			}
		}
		
		// if the black is count of 25 then message
		if(count == 25)	{
			JOptionPane.showMessageDialog(this, "You have won!");
		}
	}

	private void btnColor(JButton btn) {
		if(btn.getBackground() == Color.BLACK) {											
			btn.setBackground(Color.WHITE);
		} else {
			btn.setBackground(Color.BLACK);
		}
	}
	
	private void restart() {
		dispose();
		LightsOut l = new LightsOut();
		l.setVisible(true);
		return;		
	}
	
	public static void main(String[] args) {
		LightsOut l = new LightsOut();
		l.setVisible(true);
	}
	
}
